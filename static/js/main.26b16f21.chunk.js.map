{"version":3,"sources":["Misc.js","Temperature.js","Extra.js","Error.js","App.js","serviceWorker.js","index.js"],"names":["setColor","temperature","temp","Math","round","h","s","l","c","abs","x","m","r","g","b","toString","length","HSLToHex","Temperature","color","className","style","backgroundColor","Footer","href","target","rel","Extra","body","extra","dewpoint","substr","humidity","pressure","air_density","Error","timer","ReactGA","initialize","App","props","api_key","state","error","initialLoaded","measurementDate","measurementTime","timerDefault","colorDefault","setInterval","a","timerControl","this","fetch","then","res","json","result","datetime","datetimeData","date","Date","toLocaleDateString","toLocaleTimeString","parseDatetime","time","colorNew","setState","console","log","e","fetchData","Button","variant","onClick","updateNow","bind","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.26b16f21.chunk.js","sourcesContent":["export function setColor(temperature) {\r\n    let temp = Math.round(temperature);\r\n\r\n    if (temp < -40) temp = -40;\r\n    if (temp > 40) temp = 40;\r\n\r\n    let hsl = (320 - ((temp + 40) * 4));\r\n    let hex = HSLToHex(hsl, 100, 50);\r\n    return hex\r\n}\r\n\r\nexport function parseDatetime(datetime) {\r\n    let datetimeData = [];\r\n\r\n    let date = new Date(datetime)\r\n    datetimeData[0] = date.toLocaleDateString('en-FI')\r\n    datetimeData[1] = date.toLocaleTimeString('en-FI')\r\n\r\n    return datetimeData;\r\n}\r\n\r\n// Copied from https://css-tricks.com/converting-color-spaces-in-javascript/\r\nfunction HSLToHex(h,s,l) {\r\n    s /= 100;\r\n    l /= 100;\r\n  \r\n    let c = (1 - Math.abs(2 * l - 1)) * s,\r\n        x = c * (1 - Math.abs((h / 60) % 2 - 1)),\r\n        m = l - c/2,\r\n        r = 0,\r\n        g = 0,\r\n        b = 0;\r\n  \r\n    if (0 <= h && h < 60) {\r\n      r = c; g = x; b = 0;\r\n    } else if (60 <= h && h < 120) {\r\n      r = x; g = c; b = 0;\r\n    } else if (120 <= h && h < 180) {\r\n      r = 0; g = c; b = x;\r\n    } else if (180 <= h && h < 240) {\r\n      r = 0; g = x; b = c;\r\n    } else if (240 <= h && h < 300) {\r\n      r = x; g = 0; b = c;\r\n    } else if (300 <= h && h < 360) {\r\n      r = c; g = 0; b = x;\r\n    }\r\n    // Having obtained RGB, convert channels to hex\r\n    r = Math.round((r + m) * 255).toString(16);\r\n    g = Math.round((g + m) * 255).toString(16);\r\n    b = Math.round((b + m) * 255).toString(16);\r\n  \r\n    // Prepend 0s, if necessary\r\n    if (r.length === 1)\r\n      r = \"0\" + r;\r\n    if (g.length === 1)\r\n      g = \"0\" + g;\r\n    if (b.length === 1)\r\n      b = \"0\" + b;\r\n  \r\n    return \"#\" + r + g + b;\r\n  }","import React from 'react';\r\n\r\nconst Temperature = ({temperature, color}) => {\r\n    return (\r\n        <div>\r\n            <header \r\n                className=\"App-main\"\r\n                style={{\r\n                    backgroundColor: color\r\n                }}\r\n            >\r\n                <h1 className=\"App-temperature\">\r\n                    {temperature}°C\r\n                </h1>\r\n            </header>\r\n\r\n            <section \r\n                className=\"App-main-bottom\"\r\n                style={{ \r\n                backgroundColor: color \r\n                }}  \r\n            >\r\n                <p>\r\n                    &darr; More data below &darr;\r\n                </p>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Temperature;","import React from 'react';\r\n\r\nconst Extra = ({body, extra}) => {\r\n    return (\r\n        <div>\r\n            <h3>\r\n                Dewpoint: {body[0].dewpoint.toString().substr(0, 5)}°C <br />\r\n                Humidity: {body[0].humidity.toString().substr(0, 5)}% <br />\r\n                Pressure: {body[0].pressure.toString().substr(0, 4)}.{body[0].pressure.toString().substr(4, 2)} hPa <br />\r\n                Air density: {body[0].air_density.toString().substr(0, 4)} kg/m3\r\n            </h3>\r\n\r\n            <p>\r\n            <br />\r\n                Measured at {extra[0]} <br /> on {extra[1]} <br /> <br />\r\n                Next update in {extra[2]} seconds\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <footer className=\"App-footer\">\r\n            <p>\r\n                Made by <a href=\"https://github.com/Jontzii\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"App-link\">Jontzi</a>\r\n            </p> \r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Extra;","import React from 'react';\r\n\r\nconst Error = ({timer}) => {\r\n    return (\r\n        <header className=\"App-main-error\">\r\n            <h1>Error while loading data</h1>\r\n            <p>\r\n                This might be a problem with the server. <br /><br />\r\n                Trying again in {timer} seconds\r\n            </p>   \r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Error;","import React, { Component } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { setColor, parseDatetime } from './Misc'\r\nimport { Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Temperature from './Temperature';\r\nimport Extra, { Footer } from './Extra';\r\nimport Error from './Error';\r\n\r\nReactGA.initialize(\"UA-131317095-3\");\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.api_key = \"mB2Oko638Vjt4o0H8m6nwpiIRVrRM4Eh\"; // This should not be stored here\r\n    this.state = {\r\n      error: null,\r\n      initialLoaded: false,\r\n      body: [],\r\n      measurementDate: \"\",\r\n      measurementTime: \"\",\r\n      timer: 0,\r\n      timerDefault: 60,\r\n      color: \"#282c34\",\r\n      colorDefault: \"#282c34\",\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    setInterval(async () => {this.timerControl()}, 1000);\r\n  }\r\n\r\n  fetchData() {\r\n    const { timerDefault, colorDefault, color } = this.state;\r\n    try {\r\n      // Fetch from weather api\r\n      fetch('https://data.jontzi.com/weather/api/1/latest?api_key=' + this.api_key)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          var datetime = parseDatetime(result.body[0].time);\r\n          var colorNew = setColor(result.body[0].temperature);\r\n\r\n          this.setState({\r\n            initialLoaded: true,\r\n            body: result.body,\r\n            measurementDate: datetime[0],\r\n            measurementTime: datetime[1],\r\n            color: colorNew,\r\n          });\r\n        },\r\n        (error) => {\r\n          console.log(error)\r\n          this.setState({\r\n            initialLoaded: true,\r\n            error,\r\n            color: colorDefault,\r\n          });\r\n        }\r\n      )\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n\r\n    this.setState({\r\n      timer: timerDefault\r\n    })\r\n  }\r\n\r\n  async timerControl() {\r\n    const { timer } = this.state;\r\n\r\n    if (timer > 0) {\r\n      let time = timer - 1;\r\n      this.setState({\r\n        timer: time\r\n      })\r\n    } else {\r\n      this.fetchData();\r\n    }\r\n  }\r\n\r\n  updateNow() {\r\n    this.fetchData();\r\n  }\r\n\r\n  render () {\r\n    const { \r\n      error, \r\n      initialLoaded, \r\n      body, \r\n      measurementDate, \r\n      measurementTime, \r\n      timer,\r\n      color\r\n    } = this.state;\r\n\r\n    if (error) {\r\n      return (\r\n        <div className=\"App\">\r\n          <Error timer={timer} />\r\n\r\n          <Button \r\n              variant=\"outline-light\"\r\n              onClick={this.updateNow.bind(this)}\r\n          >\r\n              Try again now\r\n          </Button>\r\n        </div>\r\n      );\r\n    } else if (!initialLoaded) {\r\n      return (\r\n        <div className=\"App\">\r\n          <header className=\"App-main-error\">\r\n            <h2>Loading...</h2>\r\n          </header>\r\n        </div>\r\n      )\r\n    } else {\r\n\r\n      var extra = [measurementTime, measurementDate, timer];\r\n\r\n      return (\r\n        <div className=\"App\">\r\n          <Temperature temperature={body[0].temperature} color={color} />\r\n          \r\n          <div className=\"App-extra\">\r\n            <Extra body={body} extra={extra} />\r\n\r\n            <OverlayTrigger\r\n                placement=\"right\"\r\n                delay={{ show: 250, hide: 100}}\r\n                overlay={\r\n                  <Tooltip id=\"button-tooltip\">\r\n                    Please note that excessive updating will be limited by server\r\n                  </Tooltip>\r\n                }\r\n            >\r\n                <Button variant=\"outline-light\" onClick={this.updateNow.bind(this)}>\r\n                  Update now\r\n                </Button>\r\n            </OverlayTrigger>\r\n          </div>\r\n          <Footer />\r\n        </div>\r\n      );\r\n    }\r\n  } \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}