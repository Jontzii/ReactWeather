{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","api_key","state","error","isLoaded","body","measurementDate","measurementTime","this","fetchData","setInterval","a","console","log","fetch","then","res","json","result","datetime","parseDatetime","time","setState","e","datetimeData","date","Date","toLocaleDateString","toLocaleTimeString","className","temperature","dewpoint","toString","substr","humidity","pressure","air_density","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"wSA+HeA,G,kBA3Hb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,QAAU,mCACf,EAAKC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,KAAM,GACNC,gBAAiB,GACjBC,gBAAiB,IARF,E,iFAYE,IAAD,OAClBC,KAAKC,YACLC,YAAW,sBAAC,sBAAAC,EAAA,sDAAa,EAAKF,YAAlB,2CAAgC,O,uJAI5CG,QAAQC,IAAI,SAEZ,IAEEC,MAAM,wDAA0DN,KAAKP,SACpEc,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GAEC,IAAIC,EAAW,EAAKC,cAAcF,EAAOb,KAAK,GAAGgB,MAEjD,EAAKC,SAAS,CACZlB,UAAU,EACVC,KAAMa,EAAOb,KACbC,gBAAiBa,EAAS,GAC1BZ,gBAAiBY,EAAS,QAG9B,SAAChB,GACCS,QAAQC,IAAIV,GACZ,EAAKmB,SAAS,CACZlB,UAAU,EACVD,aAIN,MAAOoB,GACPX,QAAQC,IAAIU,G,0IAIFJ,GACZ,IAAIK,EAAe,GAEfC,EAAO,IAAIC,KAAKP,GAIpB,OAHAK,EAAa,GAAKC,EAAKE,mBAAmB,SAC1CH,EAAa,GAAKC,EAAKG,mBAAmB,SAEnCJ,I,+BAGE,IAAD,EAC4DhB,KAAKN,MAAjEC,EADA,EACAA,MAAOC,EADP,EACOA,SAAUC,EADjB,EACiBA,KAAMC,EADvB,EACuBA,gBAAiBC,EADxC,EACwCA,gBAEhD,OAAIJ,EAEA,yBAAK0B,UAAU,OACb,4BAAQA,UAAU,cAChB,wDACA,wEAIIzB,EAUR,yBAAKyB,UAAU,OACb,4BAAQA,UAAU,YAChB,wBAAIA,UAAU,mBACXxB,EAAK,GAAGyB,YADX,UAKF,6BAASD,UAAU,mBAEjB,6DAMF,6BAASA,UAAU,aAEjB,yCACaxB,EAAK,GAAG0B,SAASC,WAAWC,OAAO,EAAG,GADnD,SACyD,6BADzD,aAEa5B,EAAK,GAAG6B,SAASF,WAAWC,OAAO,EAAG,GAFnD,KAEwD,6BAFxD,aAGa5B,EAAK,GAAG8B,SAASH,WAAWC,OAAO,EAAG,GAHnD,IAGwD5B,EAAK,GAAG8B,SAASH,WAAWC,OAAO,EAAG,GAH9F,QAGsG,6BAHtG,gBAIgB5B,EAAK,GAAG+B,YAAYJ,WAAWC,OAAO,EAAG,GAJzD,UAOA,0CACe1B,EADf,IACgC,6BADhC,OAC2CD,EAD3C,IAC4D,6BAD5D,IACmE,6BADnE,8CAMF,4BAAQuB,UAAU,cAChB,sCAEU,uBAAGQ,KAAK,6BAA6BC,OAAO,SAASC,IAAI,sBAAsBV,UAAU,YAAzF,aAzCd,yBAAKA,UAAU,OACb,4BAAQA,UAAU,cAChB,gD,GA5EMW,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAApD,GACLS,QAAQT,MAAMA,EAAMqD,c","file":"static/js/main.b6fed627.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.api_key = \"mB2Oko638Vjt4o0H8m6nwpiIRVrRM4Eh\"; // This should not be stored here\n    this.state = {\n      error: null,\n      isLoaded: false,\n      body: [],\n      measurementDate: \"\",\n      measurementTime: \"\"\n    }\n  }\n\n  componentDidMount() {\n    this.fetchData()\n    setInterval(async () => {this.fetchData()}, 60000);\n  }\n\n  async fetchData() {\n    console.log(\"Fetch\")\n\n    try {\n      // Fetch from weather api\n      fetch('https://data.jontzi.com/weather/api/1/latest?api_key=' + this.api_key)\n      .then(res => res.json())\n      .then(\n        (result) => {\n\n          var datetime = this.parseDatetime(result.body[0].time)\n\n          this.setState({\n            isLoaded: true,\n            body: result.body,\n            measurementDate: datetime[0],\n            measurementTime: datetime[1]\n          });\n        },\n        (error) => {\n          console.log(error)\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  parseDatetime(datetime) {\n    let datetimeData = [];\n\n    let date = new Date(datetime)\n    datetimeData[0] = date.toLocaleDateString('en-FI')\n    datetimeData[1] = date.toLocaleTimeString('en-FI')\n\n    return datetimeData;\n  }\n\n  render () {\n    const { error, isLoaded, body, measurementDate, measurementTime } = this.state;\n\n    if (error) {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>Error while loading data</h1>\n            <p>This might be a problem with the server</p>\n          </header>\n        </div>\n      );\n    } else if (!isLoaded) {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h2>Loading...</h2>\n          </header>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"App\">\n          <header className=\"App-main\">\n            <h1 className=\"App-temperature\">\n              {body[0].temperature}°C\n            </h1>\n          </header>\n\n          <section className=\"App-main-bottom\">\n\n            <p>\n              &darr; More data below &darr;\n            </p>\n\n          </section>\n\n          <section className=\"App-extra\">\n\n            <h3>\n              Dewpoint: {body[0].dewpoint.toString().substr(0, 5)}°C <br />\n              Humidity: {body[0].humidity.toString().substr(0, 5)}% <br />\n              Pressure: {body[0].pressure.toString().substr(0, 4)}.{body[0].pressure.toString().substr(4, 2)} hPa <br />\n              Air density: {body[0].air_density.toString().substr(0, 4)} kg/m3\n            </h3>\n\n            <p>\n              Measured at {measurementTime} <br /> on {measurementDate} <br /> <br />\n              Measurements are updated once per minute.\n            </p>\n          </section>\n\n          <footer className=\"App-footer\">\n            <p>\n              \n              Made by <a href=\"https://github.com/Jontzii\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"App-link\">Jontzi</a>\n            </p>\n          </footer>\n        </div>\n      );\n    }\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}